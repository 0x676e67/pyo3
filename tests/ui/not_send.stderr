error[E0277]: `*mut pyo3::Python<'static>` cannot be shared between threads safely
 --> tests/ui/not_send.rs:6:33
  |
6 |         py.allow_threads().with(|| { drop(py); });
  |                            ---- ^^^^^^^^^^^^^^^^ `*mut pyo3::Python<'static>` cannot be shared between threads safely
  |                            |
  |                            required by a bound introduced by this call
  |
  = help: within `pyo3::Python<'_>`, the trait `Sync` is not implemented for `*mut pyo3::Python<'static>`
note: required because it appears within the type `PhantomData<*mut Python<'static>>`
 --> $RUST/core/src/marker.rs
  |
  | pub struct PhantomData<T: ?Sized>;
  |            ^^^^^^^^^^^
note: required because it appears within the type `NotSend`
 --> src/impl_/not_send.rs
  |
  | pub(crate) struct NotSend(PhantomData<*mut Python<'static>>);
  |                   ^^^^^^^
  = note: required because it appears within the type `(&GILGuard, NotSend)`
note: required because it appears within the type `PhantomData<(&GILGuard, NotSend)>`
 --> $RUST/core/src/marker.rs
  |
  | pub struct PhantomData<T: ?Sized>;
  |            ^^^^^^^^^^^
note: required because it appears within the type `Python<'_>`
 --> src/marker.rs
  |
  | pub struct Python<'py>(PhantomData<(&'py GILGuard, NotSend)>);
  |            ^^^^^^
  = note: required for `&pyo3::Python<'_>` to implement `Send`
note: required because it's used within this closure
 --> tests/ui/not_send.rs:6:33
  |
6 |         py.allow_threads().with(|| { drop(py); });
  |                                 ^^
note: required by a bound in `RemoteAllowThreads::<'py>::with`
 --> src/sync.rs
  |
  |     pub fn with<T, F>(self, f: F) -> T
  |            ---- required by a bound in this associated function
  |     where
  |         F: Send + FnOnce() -> T,
  |            ^^^^ required by this bound in `RemoteAllowThreads::<'py>::with`

error[E0277]: `UnsafeCell<PyObject>` cannot be shared between threads safely
  --> tests/ui/not_send.rs:14:33
   |
14 |           py.allow_threads().with(|| {
   |  ____________________________----_^
   | |                            |
   | |                            required by a bound introduced by this call
15 | |             println!("{:?}", string);
16 | |         });
   | |_________^ `UnsafeCell<PyObject>` cannot be shared between threads safely
   |
   = help: within `&PyString`, the trait `Sync` is not implemented for `UnsafeCell<PyObject>`
note: required because it appears within the type `PyAny`
  --> src/types/any.rs
   |
   | pub struct PyAny(UnsafeCell<ffi::PyObject>);
   |            ^^^^^
note: required because it appears within the type `PyString`
  --> src/types/string.rs
   |
   | pub struct PyString(PyAny);
   |            ^^^^^^^^
   = note: required because it appears within the type `&PyString`
   = note: required for `&&PyString` to implement `Send`
note: required because it's used within this closure
  --> tests/ui/not_send.rs:14:33
   |
14 |         py.allow_threads().with(|| {
   |                                 ^^
note: required by a bound in `RemoteAllowThreads::<'py>::with`
  --> src/sync.rs
   |
   |     pub fn with<T, F>(self, f: F) -> T
   |            ---- required by a bound in this associated function
   |     where
   |         F: Send + FnOnce() -> T,
   |            ^^^^ required by this bound in `RemoteAllowThreads::<'py>::with`
